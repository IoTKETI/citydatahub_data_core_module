{
	"info": {
		"_postman_id": "bdadcbbf-7663-4877-8cea-918193c00fb5",
		"name": "datacore_kafka_binding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OffStreetParking",
			"item": [
				{
					"name": "offstreetparking_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1686eec-b41b-49ca-a360-7cb7a541ab0a",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cb563bf-b4ca-49dd-a1c8-fed27b12c0ce",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/parking.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:OffStreetParking:test_01\",",
									"   \"type\": \"OffStreetParking\",",
									"   \"name\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"iot_01\"",
									"   },",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"locationTag\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"commercial\"",
									"   },",
									"   \"category\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"public\",",
									"         \"feeCharged\"",
									"      ]",
									"   },",
									"   \"paymentAccepted\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"Cash\",",
									"         \"Credit Card\"",
									"      ]",
									"   },",
									"   \"priceRate\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"",
									"   },",
									"   \"priceCurrency\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"KRW\"",
									"      ]",
									"   },",
									"   \"image\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"",
									"   },",
									"   \"totalSpotNumber\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 110",
									"   },",
									"   \"availableSpotNumber\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 40,",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"maximumAllowedHeight\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 2.2",
									"   },",
									"   \"openingHours\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"Mo-Su 00:00-24:00\"",
									"      ]",
									"   },",
									"   \"contactPoint\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"telephone\": \"031-000-0000\",",
									"         \"email\": \"parking@seongnam.kr\",",
									"         \"contactType\": \"City-hall\"",
									"      }",
									"   },",
									"   \"status\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"open\",",
									"         \"spaceAvailable\"",
									"      ]",
									"   },",
									"   \"refParkingSpots\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"urn:datahub:OffStreetParking:yt_lot_2\",",
									"         \"urn:datahub:OffStreetParking:yt_lot_3\"",
									"      ]",
									"   },",
									"   \"congestionIndexPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"index\": 2,",
									"            \"predictedAt\": \"2019-06-14T11:00:00,000Z\"",
									"         },",
									"         {",
									"            \"index\": 5,",
									"            \"predictedAt\": \"2019-06-14T12:00:00,000Z\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a09ed7b5-010d-4db7-a985-db92bf1966cd",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7bed1ceb-edf0-40b9-9349-e2f1b2f9aae3",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"",
									"    var responseBody = flattenFunc(response.json());",
									"",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"CREATE\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"@context\": [\r\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t      \"http://datahub.kr/parking.jsonld\"\r\n\t   ],\r\n\t   \"id\": \"urn:datahub:OffStreetParking:test_01\",\r\n\t   \"type\": \"OffStreetParking\",\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_01\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public\",\r\n\t         \"feeCharged\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash\",\r\n\t         \"Credit Card\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 110\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 40\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.2\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:00\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-0000\",\r\n\t         \"email\": \"parking@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open\",\r\n\t         \"spaceAvailable\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_2\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "DC-UT-API-001 (OffStreetParking Entity 생성)"
					},
					"response": []
				},
				{
					"name": "offstreetparking_partial_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPDATE\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_02\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293732,\r\n\t            37.4114422\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR2\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial2\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public2\",\r\n\t         \"feeCharged2\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash2\",\r\n\t         \"Credit Card2\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원2\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW2\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics2\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 112\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 42\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:02\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-00020\",\r\n\t         \"email\": \"parking2@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall2\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open2\",\r\n\t         \"spaceAvailable2\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_4\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,123+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,321+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,333+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_full_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPDATE\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"@context\": [\r\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t      \"http://datahub.kr/parking.jsonld\"\r\n\t   ],\r\n\t   \"id\": \"urn:datahub:OffStreetParking:test_01\",\r\n\t   \"type\": \"OffStreetParking\",\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_01\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public\",\r\n\t         \"feeCharged\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash\",\r\n\t         \"Credit Card\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 110\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 40\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.2\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:00\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-0000\",\r\n\t         \"email\": \"parking@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open\",\r\n\t         \"spaceAvailable\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_2\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_partial_upsert (UPDATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_02\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293732,\r\n\t            37.4114422\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR2\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial2\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public2\",\r\n\t         \"feeCharged2\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash2\",\r\n\t         \"Credit Card2\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원2\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW2\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics2\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 112\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 42\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:02\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-00020\",\r\n\t         \"email\": \"parking2@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall2\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open2\",\r\n\t         \"spaceAvailable2\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_4\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,123+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,321+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,333+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_partial_upsert (CREATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_01\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public\",\r\n\t         \"feeCharged\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash\",\r\n\t         \"Credit Card\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 110\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 40\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.2\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:00\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-0000\",\r\n\t         \"email\": \"parking@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open\",\r\n\t         \"spaceAvailable\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_2\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_02\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293732,\r\n\t            37.4114422\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR2\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial2\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public2\",\r\n\t         \"feeCharged2\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash2\",\r\n\t         \"Credit Card2\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원2\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW2\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics2\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 112\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 42\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:02\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-00020\",\r\n\t         \"email\": \"parking2@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall2\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open2\",\r\n\t         \"spaceAvailable2\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_4\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,123+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,321+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,333+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_full_upsert (CREATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"@context\": [\r\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t      \"http://datahub.kr/parking.jsonld\"\r\n\t   ],\r\n\t   \"id\": \"urn:datahub:OffStreetParking:test_01\",\r\n\t   \"type\": \"OffStreetParking\",\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"iot_01\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"locationTag\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"commercial\"\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"public\",\r\n\t         \"feeCharged\"\r\n\t      ]\r\n\t   },\r\n\t   \"paymentAccepted\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Cash\",\r\n\t         \"Credit Card\"\r\n\t      ]\r\n\t   },\r\n\t   \"priceRate\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"\r\n\t   },\r\n\t   \"priceCurrency\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"KRW\"\r\n\t      ]\r\n\t   },\r\n\t   \"image\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"\r\n\t   },\r\n\t   \"totalSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 110\r\n\t   },\r\n\t   \"availableSpotNumber\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 40\r\n\t   },\r\n\t   \"maximumAllowedHeight\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.2\r\n\t   },\r\n\t   \"openingHours\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"Mo-Su 00:00-24:00\"\r\n\t      ]\r\n\t   },\r\n\t   \"contactPoint\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"telephone\": \"031-000-0000\",\r\n\t         \"email\": \"parking@seongnam.kr\",\r\n\t         \"contactType\": \"City-hall\"\r\n\t      }\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"open\",\r\n\t         \"spaceAvailable\"\r\n\t      ]\r\n\t   },\r\n\t   \"refParkingSpots\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_2\",\r\n\t         \"urn:datahub:OffStreetParking:yt_lot_3\"\r\n\t      ]\r\n\t   },\r\n\t   \"congestionIndexPrediction\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         {\r\n\t            \"index\": 2,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         },\r\n\t         {\r\n\t            \"index\": 5,\r\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t         }\r\n\t      ],\r\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c33ce03-cbd1-4794-b0bd-ba3590c07076",
								"exec": [
									"//초기 세팅",
									"var entityType = \"OffStreetParking\";",
									"",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a05ffe21-d594-4244-a25b-ebcdaa27271d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:OffStreetParking:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=OffStreetParking\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ParkingSpot",
			"item": [
				{
					"name": "parkingspot_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2559c3f3-1839-4530-83a4-da11c2c26f65",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/parking.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:ParkingSpot:test_01\",",
									"   \"type\": \"ParkingSpot\",",
									"   \"name\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"spot_001\"",
									"   },",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"category\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"forDisabled\"",
									"      ]",
									"   },",
									"   \"width\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 2.5",
									"   },",
									"   \"length\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 5.1",
									"   },",
									"   \"status\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"free\",",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"refParkingLot\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5fcfe1b6-7a44-462d-9e89-ef638a9b8050",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:ParkingSpot:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86b7142c-febf-42f4-b8a2-c4f4b33f71d5",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e10b5a39-829d-4d6a-966d-ad8e350cb7c7",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"CREATE\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"@context\": [\r\n\t    \t\"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t\t\t\"http://datahub.kr/parking.jsonld\"\r\n\t\r\n\t   ],\r\n\t   \"id\": \"urn:datahub:ParkingSpot:test_01\",\r\n\t   \"type\": \"ParkingSpot\",\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_001\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.5\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.1\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_partial_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPDATE\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_003\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled2\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.3\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free2\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_2\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_full_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPDATE\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"@context\": [\r\n\t    \t\"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t\t\t\"http://datahub.kr/parking.jsonld\"\r\n\t\r\n\t   ],\r\n\t   \"id\": \"urn:datahub:ParkingSpot:test_01\",\r\n\t   \"type\": \"ParkingSpot\",\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_002\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.5\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.1\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_partial_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\t{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_003\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled2\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.3\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free2\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_2\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_partial_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9de7a8f-cae9-464a-82e0-49c62402bd2a",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\t{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"PARTIAL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 15.5\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_003\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do2\",\r\n\t         \"addressLocality\": \"Seongnam-si2\",\r\n\t         \"streetAddress\": \"8th Seungin-ro2\",\r\n\t         \"addressTown\": \"Yatap-dong2\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled2\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.3\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.3\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free2\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_2\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_full_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05401b04-2271-45ef-8412-2d4bd2e6b66b",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n\t   \"name\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"spot_001\"\r\n\t   },\r\n\t   \"location\": {\r\n\t      \"type\": \"GeoProperty\",\r\n\t      \"value\": {\r\n\t         \"type\": \"Point\",\r\n\t         \"coordinates\": [\r\n\t            127.1293735,\r\n\t            37.4114423\r\n\t         ]\r\n\t      }\r\n\t   },\r\n\t   \"address\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": {\r\n\t         \"addressCountry\": \"KR\",\r\n\t         \"addressRegion\": \"Gyeonggi-do\",\r\n\t         \"addressLocality\": \"Seongnam-si\",\r\n\t         \"streetAddress\": \"8th Seungin-ro\",\r\n\t         \"addressTown\": \"Yatap-dong\"\r\n\t      }\r\n\t   },\r\n\t   \"category\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": [\r\n\t         \"forDisabled\"\r\n\t      ]\r\n\t   },\r\n\t   \"width\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 2.5\r\n\t   },\r\n\t   \"length\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": 5.1\r\n\t   },\r\n\t   \"status\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"free\"\r\n\t   },\r\n\t   \"refParkingLot\": {\r\n\t      \"type\": \"Property\",\r\n\t      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"\r\n\t   }\r\n\t}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:ParkingSpot:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=ParkingSpot\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AirqualityObserved",
			"item": [
				{
					"name": "airqualityobserved_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81e17389-e07e-4721-9508-7369da088c57",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://datahub.kr/airquality.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:AirQualityObserved:test_01\",",
									"   \"type\": \"AirQualityObserved\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"airQualityObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"so2\": 0.005,",
									"         \"co\": 0.8,",
									"         \"o3\": 0.028,",
									"         \"no2\": 0.077,",
									"         \"pm10\": 13,",
									"         \"pm25\": 8",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"airQualityIndexObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"totalIndex\": 20,",
									"         \"totalCategory\": \"좋음\",",
									"         \"so2Category\": \"좋음\",",
									"         \"coCategory\": \"좋음\",",
									"         \"o3Category\": \"좋음\",",
									"         \"no2Category\": \"좋음\",",
									"         \"pm10Category\": \"좋음\",",
									"         \"pm25Category\": \"좋음\"",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"indexRef\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"",
									"   }",
									"}",
									"`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24260623-98bf-4152-804b-9d1bbc8837ec",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "195619b3-534c-4cd9-879d-b16ab81e4664",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edb04a46-f0fc-4ead-b0ba-5ab33af35472",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"CREATE\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/airquality.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:AirQualityObserved:test_01\",\r\n   \"type\": \"AirQualityObserved\",\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 0.005,\r\n         \"co\": 0.8,\r\n         \"o3\": 0.028,\r\n         \"no2\": 0.077,\r\n         \"pm10\": 13,\r\n         \"pm25\": 8\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"airQualityIndexObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"totalIndex\": 20,\r\n         \"totalCategory\": \"좋음\",\r\n         \"so2Category\": \"좋음\",\r\n         \"coCategory\": \"좋음\",\r\n         \"o3Category\": \"좋음\",\r\n         \"no2Category\": \"좋음\",\r\n         \"pm10Category\": \"좋음\",\r\n         \"pm25Category\": \"좋음\"\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"indexRef\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\r\n   }\r\n}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n   \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n         \"type\": \"Point\",\n         \"coordinates\": [\n            126.1293735,\n            36.4114423\n         ]\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\n   },\n   \"address\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"addressCountry\": \"KR2\",\n         \"addressRegion\": \"Gyeonggi-do2\",\n         \"addressLocality\": \"Seongnam-si2\",\n         \"streetAddress\": \"8th Seungin-ro2\",\n         \"addressTown\": \"Yatap-dong2\"\n      }\n   },\n   \"airQualityObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"so2\": 0.002,\n         \"co\": 0.2,\n         \"o3\": 0.022,\n         \"no2\": 0.027,\n         \"pm10\": 12,\n         \"pm25\": 2\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\n   },\n   \"airQualityIndexObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"totalIndex\": 22,\n         \"totalCategory\": \"보통\",\n         \"so2Category\": \"보통\",\n         \"coCategory\": \"보통\",\n         \"o3Category\": \"보통\",\n         \"no2Category\": \"보통\",\n         \"pm10Category\": \"보통\",\n         \"pm25Category\": \"보통\"\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\n   },\n   \"indexRef\": {\n      \"type\": \"Property\",\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\n   }\n}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_full_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPDATE\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/airquality.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:AirQualityObserved:test_01\",\r\n   \"type\": \"AirQualityObserved\",\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 0.005,\r\n         \"co\": 0.8,\r\n         \"o3\": 0.028,\r\n         \"no2\": 0.077,\r\n         \"pm10\": 13,\r\n         \"pm25\": 8\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"airQualityIndexObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"totalIndex\": 20,\r\n         \"totalCategory\": \"좋음\",\r\n         \"so2Category\": \"좋음\",\r\n         \"coCategory\": \"좋음\",\r\n         \"o3Category\": \"좋음\",\r\n         \"no2Category\": \"좋음\",\r\n         \"pm10Category\": \"좋음\",\r\n         \"pm25Category\": \"좋음\"\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"indexRef\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\r\n   }\r\n}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_parital_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n   \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n         \"type\": \"Point\",\n         \"coordinates\": [\n            126.1293735,\n            36.4114423\n         ]\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\n   },\n   \"address\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"addressCountry\": \"KR2\",\n         \"addressRegion\": \"Gyeonggi-do2\",\n         \"addressLocality\": \"Seongnam-si2\",\n         \"streetAddress\": \"8th Seungin-ro2\",\n         \"addressTown\": \"Yatap-dong2\"\n      }\n   },\n   \"airQualityObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"so2\": 0.002,\n         \"co\": 0.2,\n         \"o3\": 0.022,\n         \"no2\": 0.027,\n         \"pm10\": 12,\n         \"pm25\": 2\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\n   },\n   \"airQualityIndexObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"totalIndex\": 22,\n         \"totalCategory\": \"보통\",\n         \"so2Category\": \"보통\",\n         \"coCategory\": \"보통\",\n         \"o3Category\": \"보통\",\n         \"no2Category\": \"보통\",\n         \"pm10Category\": \"보통\",\n         \"pm25Category\": \"보통\"\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\n   },\n   \"indexRef\": {\n      \"type\": \"Property\",\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\n   }\n}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_parital_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d711eec2-2f1a-449a-a081-05cde1fa8aee",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n   \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n         \"type\": \"Point\",\n         \"coordinates\": [\n            127.1293735,\n            37.4114423\n         ]\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n   },\n   \"address\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"addressCountry\": \"KR\",\n         \"addressRegion\": \"Gyeonggi-do\",\n         \"addressLocality\": \"Seongnam-si\",\n         \"streetAddress\": \"8th Seungin-ro\",\n         \"addressTown\": \"Yatap-dong\"\n      }\n   },\n   \"airQualityObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"so2\": 0.005,\n         \"co\": 0.8,\n         \"o3\": 0.028,\n         \"no2\": 0.077,\n         \"pm10\": 13,\n         \"pm25\": 8\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n   },\n   \"airQualityIndexObservation\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"totalIndex\": 20,\n         \"totalCategory\": \"좋음\",\n         \"so2Category\": \"좋음\",\n         \"coCategory\": \"좋음\",\n         \"o3Category\": \"좋음\",\n         \"no2Category\": \"좋음\",\n         \"pm10Category\": \"좋음\",\n         \"pm25Category\": \"좋음\"\n      },\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n   },\n   \"indexRef\": {\n      \"type\": \"Property\",\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n   }\n}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            126.1293735,\r\n            36.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR2\",\r\n         \"addressRegion\": \"Gyeonggi-do2\",\r\n         \"addressLocality\": \"Seongnam-si2\",\r\n         \"streetAddress\": \"8th Seungin-ro2\",\r\n         \"addressTown\": \"Yatap-dong2\"\r\n      }\r\n   },\r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 0.002,\r\n         \"co\": 0.2,\r\n         \"o3\": 0.022,\r\n         \"no2\": 0.027,\r\n         \"pm10\": 12,\r\n         \"pm25\": 2\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\r\n   },\r\n   \"airQualityIndexObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"totalIndex\": 22,\r\n         \"totalCategory\": \"보통\",\r\n         \"so2Category\": \"보통\",\r\n         \"coCategory\": \"보통\",\r\n         \"o3Category\": \"보통\",\r\n         \"no2Category\": \"보통\",\r\n         \"pm10Category\": \"보통\",\r\n         \"pm25Category\": \"보통\"\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,222+09:00\"\r\n   },\r\n   \"indexRef\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\r\n   }\r\n}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_full_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3898fb7c-a85b-473b-a1b1-682ba04dcba8",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"FULL_UPSERT\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\r\n,\"query\":{}\r\n,\"content\":\r\n\t{\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 0.005,\r\n         \"co\": 0.8,\r\n         \"o3\": 0.028,\r\n         \"no2\": 0.077,\r\n         \"pm10\": 13,\r\n         \"pm25\": 8\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"airQualityIndexObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"totalIndex\": 20,\r\n         \"totalCategory\": \"좋음\",\r\n         \"so2Category\": \"좋음\",\r\n         \"coCategory\": \"좋음\",\r\n         \"o3Category\": \"좋음\",\r\n         \"no2Category\": \"좋음\",\r\n         \"pm10Category\": \"좋음\",\r\n         \"pm25Category\": \"좋음\"\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"indexRef\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\r\n   }\r\n}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityObserved\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AirQualityForecast",
			"item": [
				{
					"name": "airqualityforecast_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81221e73-3418-4a64-baa8-1695a0b92fbf",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{      \"id\": \"urn:datahub:AirQualityForecast:test_01\",",
									"",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/airquality.jsonld\"",
									"   ],",
									"   \"type\": \"AirQualityForecast\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"airQualityPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"so2\": 0.007,",
									"            \"co\": 0.9,",
									"            \"o3\": 0.03,",
									"            \"no2\": 0.08,",
									"            \"pm10\": 33,",
									"            \"pm25\": 22,",
									"            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"",
									"         },",
									"         {",
									"            \"so2\": 0.009,",
									"            \"co\": 0.7,",
									"            \"o3\": 0.02,",
									"            \"no2\": 0.05,",
									"            \"pm10\": 23,",
									"            \"pm25\": 12,",
									"            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"",
									"   },",
									"   \"airQualityIndexPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"totalIndex\": 20,",
									"            \"totalCategory\": \"좋음\",",
									"            \"so2Category\": \"좋음\",",
									"            \"coCategory\": \"좋음\",",
									"            \"o3Category\": \"좋음\",",
									"            \"no2Category\": \"좋음\",",
									"            \"pm10Category\": \"좋음\",",
									"            \"pm25Category\": \"좋음\",",
									"            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"",
									"         },",
									"         {",
									"            \"totalIndex\": 20,",
									"            \"totalCategory\": \"좋음\",",
									"            \"so2Category\": \"좋음\",",
									"            \"coCategory\": \"좋음\",",
									"            \"o3Category\": \"좋음\",",
									"            \"no2Category\": \"좋음\",",
									"            \"pm10Category\": \"좋음\",",
									"            \"pm25Category\": \"좋음\",",
									"            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"",
									"   },",
									"   \"indexRef\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2178e7f0-989e-461a-abdc-050b16a54ac7",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityForecast:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"CREATE\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"@context\": [\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n\t      \"http://datahub.kr/airquality.jsonld\"\n\t   ],\n\t   \"id\": \"urn:datahub:AirQualityForecast:test_01\",\n\t   \"type\": \"AirQualityForecast\",\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.007,\n\t            \"co\": 0.9,\n\t            \"o3\": 0.03,\n\t            \"no2\": 0.08,\n\t            \"pm10\": 33,\n\t            \"pm25\": 22,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.009,\n\t            \"co\": 0.7,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.05,\n\t            \"pm10\": 23,\n\t            \"pm25\": 12,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            126.1293735,\n\t            36.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.017,\n\t            \"co\": 0.8,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.07,\n\t            \"pm10\": 22,\n\t            \"pm25\": 11,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,123+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.049,\n\t            \"co\": 0.4,\n\t            \"o3\": 0.42,\n\t            \"no2\": 0.45,\n\t            \"pm10\": 24,\n\t            \"pm25\": 13,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,321+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,321+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 40,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,321+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 21,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T10:10:10,100+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,123+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_full_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"@context\": [\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n\t      \"http://datahub.kr/airquality.jsonld\"\n\t   ],\n\t   \"id\": \"urn:datahub:AirQualityForecast:test_01\",\n\t   \"type\": \"AirQualityForecast\",\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.007,\n\t            \"co\": 0.9,\n\t            \"o3\": 0.03,\n\t            \"no2\": 0.08,\n\t            \"pm10\": 33,\n\t            \"pm25\": 22,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.009,\n\t            \"co\": 0.7,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.05,\n\t            \"pm10\": 23,\n\t            \"pm25\": 12,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_parital_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            126.1293735,\n\t            36.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.017,\n\t            \"co\": 0.8,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.07,\n\t            \"pm10\": 22,\n\t            \"pm25\": 11,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,123+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.049,\n\t            \"co\": 0.4,\n\t            \"o3\": 0.42,\n\t            \"no2\": 0.45,\n\t            \"pm10\": 24,\n\t            \"pm25\": 13,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,321+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,321+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 40,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,321+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 21,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T10:10:10,100+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,123+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_parital_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d7d77d3-526e-418d-b94f-34a742e64223",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.007,\n\t            \"co\": 0.9,\n\t            \"o3\": 0.03,\n\t            \"no2\": 0.08,\n\t            \"pm10\": 33,\n\t            \"pm25\": 22,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.009,\n\t            \"co\": 0.7,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.05,\n\t            \"pm10\": 23,\n\t            \"pm25\": 12,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            126.1293735,\n\t            36.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.017,\n\t            \"co\": 0.8,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.07,\n\t            \"pm10\": 22,\n\t            \"pm25\": 11,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,123+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.049,\n\t            \"co\": 0.4,\n\t            \"o3\": 0.42,\n\t            \"no2\": 0.45,\n\t            \"pm10\": 24,\n\t            \"pm25\": 13,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,321+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,321+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 40,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,321+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 21,\n\t            \"totalCategory\": \"보통\",\n\t            \"so2Category\": \"보통\",\n\t            \"coCategory\": \"보통\",\n\t            \"o3Category\": \"보통\",\n\t            \"no2Category\": \"보통\",\n\t            \"pm10Category\": \"보통\",\n\t            \"pm25Category\": \"보통\",\n\t            \"predictedAt\": \"2019-06-14T10:10:10,100+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,123+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=130\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_full_upsert (CREATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"airQualityPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"so2\": 0.007,\n\t            \"co\": 0.9,\n\t            \"o3\": 0.03,\n\t            \"no2\": 0.08,\n\t            \"pm10\": 33,\n\t            \"pm25\": 22,\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"so2\": 0.009,\n\t            \"co\": 0.7,\n\t            \"o3\": 0.02,\n\t            \"no2\": 0.05,\n\t            \"pm10\": 23,\n\t            \"pm25\": 12,\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"airQualityIndexPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"totalIndex\": 20,\n\t            \"totalCategory\": \"좋음\",\n\t            \"so2Category\": \"좋음\",\n\t            \"coCategory\": \"좋음\",\n\t            \"o3Category\": \"좋음\",\n\t            \"no2Category\": \"좋음\",\n\t            \"pm10Category\": \"좋음\",\n\t            \"pm25Category\": \"좋음\",\n\t            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n\t   },\n\t   \"indexRef\": {\n\t      \"type\": \"Property\",\n\t      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:AirQualityForecast:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=AirQualityForecast\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WeatherObserved",
			"item": [
				{
					"name": "weatherobserved_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ae53247-7a97-4dfc-9aa4-b76c3c52e060",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/nㅇgsi-ld/core-context.jsonld\",",
									"      \"http://datahub.kr/weather.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:WeatherObserved:test_01\",",
									"   \"type\": \"WeatherObserved\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"weatherObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"temperature\": 10.2,",
									"         \"windSpeed\": 0.3,",
									"         \"humidity\": 68,",
									"         \"rainfall\": 0.2,",
									"         \"hourlyRainfall\": 2.5,",
									"         \"rainType\": \"비\",",
									"         \"snowfall\": 0.2,",
									"         \"visibility\": 3000",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc7fb73d-e796-438b-98bb-2db0d112525e",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"CREATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"@context\": [\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n\t      \"http://datahub.kr/weather.jsonld\"\n\t   ],\n\t   \"id\": \"urn:datahub:WeatherObserved:test_01\",\n\t   \"type\": \"WeatherObserved\",\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 10.2,\n\t         \"windSpeed\": 0.3,\n\t         \"humidity\": 68,\n\t         \"rainfall\": 0.2,\n\t         \"hourlyRainfall\": 2,\n\t         \"rainType\": \"비\",\n\t         \"snowfall\": 0.2,\n\t         \"visibility\": 3000\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            125.1293735,\n\t            35.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR2\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 10.3,\n\t         \"windSpeed\": 0.4,\n\t         \"humidity\": 64,\n\t         \"rainfall\": 0.5,\n\t         \"hourlyRainfall\": 6,\n\t         \"rainType\": \"비2\",\n\t         \"snowfall\": 0.1,\n\t         \"visibility\": 3003\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:53,333+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_full_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"@context\": [\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n\t      \"http://datahub.kr/weather.jsonld\"\n\t   ],\n\t   \"id\": \"urn:datahub:WeatherObserved:test_01\",\n\t   \"type\": \"WeatherObserved\",\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 10.2,\n\t         \"windSpeed\": 0.3,\n\t         \"humidity\": 68,\n\t         \"rainfall\": 0.2,\n\t         \"hourlyRainfall\": 2,\n\t         \"rainType\": \"비\",\n\t         \"snowfall\": 0.2,\n\t         \"visibility\": 3000\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_parital_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            123.1293735,\n\t            33.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR3\",\n\t         \"addressRegion\": \"Gyeonggi-do3\",\n\t         \"addressLocality\": \"Seongnam-si3\",\n\t         \"streetAddress\": \"8th Seungin-ro3\",\n\t         \"addressTown\": \"Yatap-dong3\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 13.2,\n\t         \"windSpeed\": 0.4,\n\t         \"humidity\": 64,\n\t         \"rainfall\": 0.4,\n\t         \"hourlyRainfall\": 4,\n\t         \"rainType\": \"비2\",\n\t         \"snowfall\": 0.4,\n\t         \"visibility\": 3044\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,321+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_parital_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d7d77d3-526e-418d-b94f-34a742e64223",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 10.2,\n\t         \"windSpeed\": 0.3,\n\t         \"humidity\": 68,\n\t         \"rainfall\": 0.2,\n\t         \"hourlyRainfall\": 2,\n\t         \"rainType\": \"비\",\n\t         \"snowfall\": 0.2,\n\t         \"visibility\": 3000\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            123.1293735,\n\t            33.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,123+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR3\",\n\t         \"addressRegion\": \"Gyeonggi-do3\",\n\t         \"addressLocality\": \"Seongnam-si3\",\n\t         \"streetAddress\": \"8th Seungin-ro3\",\n\t         \"addressTown\": \"Yatap-dong3\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 13.2,\n\t         \"windSpeed\": 0.4,\n\t         \"humidity\": 64,\n\t         \"rainfall\": 0.4,\n\t         \"hourlyRainfall\": 4,\n\t         \"rainType\": \"비2\",\n\t         \"snowfall\": 0.4,\n\t         \"visibility\": 3044\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,321+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_full_upsert (CREATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherObservation\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"temperature\": 10.2,\n\t         \"windSpeed\": 0.3,\n\t         \"humidity\": 68,\n\t         \"rainfall\": 0.2,\n\t         \"hourlyRainfall\": 2,\n\t         \"rainType\": \"비\",\n\t         \"snowfall\": 0.2,\n\t         \"visibility\": 3000\n\t      },\n\t      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:WeatherObserved:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=WeatherObserved\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WeatherForecast",
			"item": [
				{
					"name": "weatherforecast_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4093332-4318-491c-b754-41234ec2c1cb",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/weather.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:WeatherForecast:test_01\",",
									"   \"type\": \"WeatherForecast\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"weatherPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"temperature\": 10.1,",
									"            \"lowestTemperature\": -3.0,",
									"            \"highestTemperature\": 7.0,",
									"            \"windSpeed\": 0.2,",
									"            \"humidity\": 68,",
									"            \"rainfall\": 10,",
									"            \"rainfallProbability\": 60,",
									"            \"rainType\": \"비\",",
									"            \"snowfall\": 0,",
									"            \"predictedAt\": \"2019-06-08T06:00:00,000Z\"",
									"         },",
									"         {",
									"            \"temperature\": 14.1,",
									"            \"lowestTemperature\": -3.0,",
									"            \"highestTemperature\": 7.0,",
									"            \"windSpeed\": 0.3,",
									"            \"humidity\": 65,",
									"            \"rainfall\": 20,",
									"            \"rainfallProbability\": 60,",
									"            \"rainType\": \"맑음\",",
									"            \"snowfall\": 0,",
									"            \"predictedAt\": \"2019-06-08T09:00:00,000Z\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherForecast:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 처리 결과 조회 및 검증",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"CREATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"@context\": [\n\t      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n\t      \"http://datahub.kr/weather.jsonld\"\n\t   ],\n\t   \"id\": \"urn:datahub:WeatherForecast:test_01\",\n\t   \"type\": \"WeatherForecast\",\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.2,\n\t            \"humidity\": 68,\n\t            \"rainfall\": 10,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.3,\n\t            \"humidity\": 65,\n\t            \"rainfall\": 20,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            122.1293735,\n\t            32.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR2\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.32,\n\t            \"humidity\": 62,\n\t            \"rainfall\": 12,\n\t            \"rainfallProbability\": 62,\n\t            \"rainType\": \"비2\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,333+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.4,\n\t            \"humidity\": 64,\n\t            \"rainfall\": 24,\n\t            \"rainfallProbability\": 64,\n\t            \"rainType\": \"비4\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_full_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPDATE\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.2,\n\t            \"humidity\": 68,\n\t            \"rainfall\": 10,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.3,\n\t            \"humidity\": 65,\n\t            \"rainfall\": 20,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_parital_upsert (UPDATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            122.1293735,\n\t            32.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR2\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.32,\n\t            \"humidity\": 62,\n\t            \"rainfall\": 12,\n\t            \"rainfallProbability\": 62,\n\t            \"rainType\": \"비2\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,333+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.4,\n\t            \"humidity\": 64,\n\t            \"rainfall\": 24,\n\t            \"rainfallProbability\": 64,\n\t            \"rainType\": \"비4\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_parital_upsert (CREATE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.') || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d7d77d3-526e-418d-b94f-34a742e64223",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"PARTIAL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.2,\n\t            \"humidity\": 68,\n\t            \"rainfall\": 10,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.3,\n\t            \"humidity\": 65,\n\t            \"rainfall\": 20,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_full_upsert (UPDATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            122.1293735,\n\t            32.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR2\",\n\t         \"addressRegion\": \"Gyeonggi-do2\",\n\t         \"addressLocality\": \"Seongnam-si2\",\n\t         \"streetAddress\": \"8th Seungin-ro2\",\n\t         \"addressTown\": \"Yatap-dong2\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.32,\n\t            \"humidity\": 62,\n\t            \"rainfall\": 12,\n\t            \"rainfallProbability\": 62,\n\t            \"rainType\": \"비2\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,333+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.2,\n\t            \"lowestTemperature\": -3.2,\n\t            \"highestTemperature\": 7.2,\n\t            \"windSpeed\": 0.4,\n\t            \"humidity\": 64,\n\t            \"rainfall\": 24,\n\t            \"rainfallProbability\": 64,\n\t            \"rainType\": \"비4\",\n\t            \"snowfall\": 1,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,555+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_full_upsert (CREATE)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"",
									"        // content 내부 값 비교",
									"        if (!key.startsWith('content.')",
									"            || key.startsWith('content.@context')",
									"            || key == 'content.type'){",
									"            continue;",
									"        }",
									"",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key.substring(8)];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\n,\"e2eRequestId\":\"e2eRequestId\"\n,\"operation\":\"FULL_UPSERT\"\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\n,\"query\":{}\n,\"content\":\t\n\t{\n\t   \"location\": {\n\t      \"type\": \"GeoProperty\",\n\t      \"value\": {\n\t         \"type\": \"Point\",\n\t         \"coordinates\": [\n\t            127.1293735,\n\t            37.4114423\n\t         ]\n\t      }\n\t   },\n\t   \"address\": {\n\t      \"type\": \"Property\",\n\t      \"value\": {\n\t         \"addressCountry\": \"KR\",\n\t         \"addressRegion\": \"Gyeonggi-do\",\n\t         \"addressLocality\": \"Seongnam-si\",\n\t         \"streetAddress\": \"8th Seungin-ro\",\n\t         \"addressTown\": \"Yatap-dong\"\n\t      }\n\t   },\n\t   \"weatherPrediction\": {\n\t      \"type\": \"Property\",\n\t      \"value\": [\n\t         {\n\t            \"temperature\": 10.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.2,\n\t            \"humidity\": 68,\n\t            \"rainfall\": 10,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         },\n\t         {\n\t            \"temperature\": 14.1,\n\t            \"lowestTemperature\": -3.0,\n\t            \"highestTemperature\": 7.0,\n\t            \"windSpeed\": 0.3,\n\t            \"humidity\": 65,\n\t            \"rainfall\": 20,\n\t            \"rainfallProbability\": 60,\n\t            \"rainType\": \"비\",\n\t            \"snowfall\": 0,\n\t            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t         }\n\t      ],\n\t      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\n\t   }\n\t}\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherForecast_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"// HTTP to KAFKA 요청 응답 검증",
									"pm.test(\"HTTP to KAFKA Proxy Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"DELETE\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"     console.log(response.code)",
									"     pm.test(\"Delete status code is equal to\", function() {",
									"                pm.expect(response.code).equal(400);",
									"",
									"             });",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestId\":\"requestId\"\r\n,\"e2eRequestId\":\"e2eRequestId\"\r\n,\"operation\":\"DELETE\"\r\n,\"to\":\"testKafka/urn:datahub:WeatherForecast:test_01\"\r\n,\"contentType\":\"application/Id;json;Type=WeatherForecast\"\r\n,\"query\":{}\r\n,\"content\":{}\r\n}"
						},
						"url": {
							"raw": "http://{{kafkaProxyHost}}/test/kafka",
							"protocol": "http",
							"host": [
								"{{kafkaProxyHost}}"
							],
							"path": [
								"test",
								"kafka"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}