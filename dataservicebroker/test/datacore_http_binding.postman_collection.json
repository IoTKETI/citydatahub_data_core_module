{
	"info": {
		"_postman_id": "77995ae8-b241-4bb7-99d7-16c3de4e6563",
		"name": "datacore_http_binding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OffStreetParking",
			"item": [
				{
					"name": "offstreetparking_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1686eec-b41b-49ca-a360-7cb7a541ab0a",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cb563bf-b4ca-49dd-a1c8-fed27b12c0ce",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/parking.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:OffStreetParking:test_01\",",
									"   \"type\": \"OffStreetParking\",",
									"   \"name\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"iot_01\"",
									"   },",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"locationTag\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"commercial\"",
									"   },",
									"   \"category\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"public\",",
									"         \"feeCharged\"",
									"      ]",
									"   },",
									"   \"paymentAccepted\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"Cash\",",
									"         \"Credit Card\"",
									"      ]",
									"   },",
									"   \"priceRate\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"",
									"   },",
									"   \"priceCurrency\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"KRW\"",
									"      ]",
									"   },",
									"   \"image\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"",
									"   },",
									"   \"totalSpotNumber\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 110",
									"   },",
									"   \"availableSpotNumber\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 40,",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"maximumAllowedHeight\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 2.2",
									"   },",
									"   \"openingHours\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"Mo-Su 00:00-24:00\"",
									"      ]",
									"   },",
									"   \"contactPoint\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"telephone\": \"031-000-0000\",",
									"         \"email\": \"parking@seongnam.kr\",",
									"         \"contactType\": \"City-hall\"",
									"      }",
									"   },",
									"   \"status\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"open\",",
									"         \"spaceAvailable\"",
									"      ]",
									"   },",
									"   \"refParkingSpots\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"urn:datahub:OffStreetParking:yt_lot_2\",",
									"         \"urn:datahub:OffStreetParking:yt_lot_3\"",
									"      ]",
									"   },",
									"   \"congestionIndexPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"index\": 2,",
									"            \"predictedAt\": \"2019-06-14T11:00:00,000Z\"",
									"         },",
									"         {",
									"            \"index\": 5,",
									"            \"predictedAt\": \"2019-06-14T12:00:00,000Z\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a09ed7b5-010d-4db7-a985-db92bf1966cd",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7bed1ceb-edf0-40b9-9349-e2f1b2f9aae3",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        ",
									"    }",
									"    ",
									"    pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/parking.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:OffStreetParking:test_01\",\r\n   \"type\": \"OffStreetParking\",\r\n   \"name\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"iot_01\"\r\n   },\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      }\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"locationTag\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"commercial\"\r\n   },\r\n   \"category\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"public\",\r\n         \"feeCharged\"\r\n      ]\r\n   },\r\n   \"paymentAccepted\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"Cash\",\r\n         \"Credit Card\"\r\n      ]\r\n   },\r\n   \"priceRate\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"최초 30분 무료 free, 이후 10분당 500원\"\r\n   },\r\n   \"priceCurrency\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"KRW\"\r\n      ]\r\n   },\r\n   \"image\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"http://developers.iotocean.org/photosave/ytLot1pics\"\r\n   },\r\n   \"totalSpotNumber\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 110\r\n   },\r\n   \"availableSpotNumber\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 40\r\n   },\r\n   \"maximumAllowedHeight\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 2.2\r\n   },\r\n   \"openingHours\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"Mo-Su 00:00-24:00\"\r\n      ]\r\n   },\r\n   \"contactPoint\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"telephone\": \"031-000-0000\",\r\n         \"email\": \"parking@seongnam.kr\",\r\n         \"contactType\": \"City-hall\"\r\n      }\r\n   },\r\n   \"status\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"open\",\r\n         \"spaceAvailable\"\r\n      ]\r\n   },\r\n   \"refParkingSpots\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"urn:datahub:OffStreetParking:yt_lot_2\",\r\n         \"urn:datahub:OffStreetParking:yt_lot_3\"\r\n      ]\r\n   },\r\n   \"congestionIndexPrediction\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         {\r\n            \"index\": 2,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         },\r\n         {\r\n            \"index\": 5,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         }\r\n      ],\r\n      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "DC-UT-API-001 (OffStreetParking Entity 생성)"
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eddf8767-4dc5-4cdd-823e-929275be025a",
								"exec": [
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa40e26b-9fc8-4dd9-acda-8026222c5c85",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "Key contains invalid characters.",
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=OffStreetParking",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f62cf5d3-84ad-460f-a979-d6e5a28106c8",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01?accept=application/ld+json",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01"
							],
							"query": [
								{
									"key": "accept",
									"value": "application/ld+json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87389c9d-e709-43ff-a9e5-340df659e853",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities?type=OffStreetParking&attr=name,location,address,locationTag,category",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "attr",
									"value": "name,location,address,locationTag,category"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve_geo_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "400bb189-41b2-4fe0-bcc5-31e3b44a4ae2",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=OffStreetParking&geometry=Polygon&geoproperty=location&maxDistance=3000&georel=near&coordinates=[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3000"
								},
								{
									"key": "georel",
									"value": "near"
								},
								{
									"key": "coordinates",
									"value": "[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]"
								},
								{
									"key": "attr",
									"value": "location",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve_q_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac68d1db-ec2a-4d45-b204-bca2f4a18204",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=OffStreetParking&q=name==\"iot_01\";paymentAccepted==\"Cash\";address[addressLocality]==\"Seongnam-si\";image==\"http://developers.iotocean.org/photosave/ytLot1pics\";locationTag==\"commercial\";maximumAllowedHeight>=2.2",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "q",
									"value": "name==\"iot_01\";paymentAccepted==\"Cash\";address[addressLocality]==\"Seongnam-si\";image==\"http://developers.iotocean.org/photosave/ytLot1pics\";locationTag==\"commercial\";maximumAllowedHeight>=2.2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81c02b9c-4f15-479b-a3cf-27e3a19b7768",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=OffStreetParking",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53b8e9cc-b468-43bb-9c8d-4a4c02ac49c0",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=OffStreetParking&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-08-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-08-15T04:22:58Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e3d8bb1-e999-4dd0-922e-14c7a26b09bb",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/urn:datahub:OffStreetParking:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								"urn:datahub:OffStreetParking:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3b02623-3ccc-473a-9ee7-5ade97aefdae",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=OffStreetParking&options=temporalValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3361ffba-c6ae-44f2-a38f-3c074ad02629",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=OffStreetParking&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_retrieve_keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2c7589c-bcc5-4428-99a5-744db266be1a",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                ",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51e7b376-5be5-4a20-8e97-db1d340d690a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=OffStreetParking&options=keyValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_temporal_retrieve_keyValuesHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b22c55a-8c98-4230-be41-d802e472d6e8",
								"exec": [
									"var entityType = \"OffStreetParking\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=OffStreetParking&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "OffStreetParking"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_partial_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "683a4c65-6d2e-4489-a396-afed5c7932af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfb42ff-c5d5-45f1-8ed5-c5cb3daebbf9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": {\r\n\"type\": \"Property\",\r\n\"value\": \"iot_01\"\r\n},\r\n\"location\": {\r\n\"type\": \"GeoProperty\",\r\n\"value\": {\r\n\"type\": \"Point\",\r\n\"coordinates\": [\r\n127.1293735,\r\n37.4114423\r\n]\r\n}\r\n},\r\n\"address\": {\r\n\"type\": \"Property\",\r\n\"value\": {\r\n\"addressCountry\": \"KR\",\r\n\"addressLocality\": \"Seongnam-si\",\r\n\"addressRegion\": \"Gyeonggi-do\",\r\n\"streetAddress\": \"8th Seungin-ro\",\r\n\"addressTown\": \"Yatap-dong\"\r\n}\r\n}\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01/attrs",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01",
								"attrs"
							]
						},
						"description": "OffStreetParking full update"
					},
					"response": []
				},
				{
					"name": "offstreetparking_partial_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7190b610-a897-4fc5-abdc-d9fdd3374ca9",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"OffStreetParking\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"refParkingSpots\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"urn:datahub:ParkingSpot:yatap_3\",\r\n         \"urn:datahub:ParkingSpot:yatap_4\"\r\n      ]\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01/attrs/refParkingSpots",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01",
								"attrs",
								"refParkingSpots"
							]
						}
					},
					"response": []
				},
				{
					"name": "offstreetparking_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c33ce03-cbd1-4794-b0bd-ba3590c07076",
								"exec": [
									"//초기 세팅",
									"var entityType = \"OffStreetParking\";",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"////////////////",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a05ffe21-d594-4244-a25b-ebcdaa27271d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:OffStreetParking:test_01/attrs/refParkingSpots",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:OffStreetParking:test_01",
								"attrs",
								"refParkingSpots"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ParkingSpot",
			"item": [
				{
					"name": "parkingspot_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2559c3f3-1839-4530-83a4-da11c2c26f65",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/parking.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:ParkingSpot:test_01\",",
									"   \"type\": \"ParkingSpot\",",
									"   \"name\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"spot_001\"",
									"   },",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"category\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         \"forDisabled\"",
									"      ]",
									"   },",
									"   \"width\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 2.5",
									"   },",
									"   \"length\": {",
									"      \"type\": \"Property\",",
									"      \"value\": 5.1",
									"   },",
									"   \"status\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"free\",",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"refParkingLot\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5fcfe1b6-7a44-462d-9e89-ef638a9b8050",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:ParkingSpot:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86b7142c-febf-42f4-b8a2-c4f4b33f71d5",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e10b5a39-829d-4d6a-966d-ad8e350cb7c7",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"@context\": [\r\n    \t\"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n\t\t\"http://datahub.kr/parking.jsonld\"\r\n\r\n   ],\r\n   \"id\": \"urn:datahub:ParkingSpot:test_01\",\r\n   \"type\": \"ParkingSpot\",\r\n   \"name\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"spot_001\"\r\n   },\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      }\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"category\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"forDisabled\"\r\n      ]\r\n   },\r\n   \"width\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 2.5\r\n   },\r\n   \"length\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 5.1\r\n   },\r\n   \"status\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"free\"\r\n   },\r\n   \"refParkingLot\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"urn:datahub:OffStreetParking:yt_lot_1\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00ad35c5-ca46-42a6-9adf-b778358348a5",
								"exec": [
									"",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87f7d1d0-f258-4d17-9ad9-4054eefcc1a5",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities/?type=ParkingSpot",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95f9f32d-c38d-41f1-900a-e6771352e936",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:ParkingSpot:test_01",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbecfcc8-daf2-4887-992d-2d027e31bc7f",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities/?type=ParkingSpot&attr=name,location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "attr",
									"value": "name,location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingSpot_retrieve_geoquery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ea27e26-74c1-49dc-a004-c06c61789745",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities?type=ParkingSpot&geometry=Polygon&geoproperty=location&maxDistance=3000&georel=intersects&coordinates=[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]&attr=location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3000"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "coordinates",
									"value": "[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]"
								},
								{
									"key": "attr",
									"value": "location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_retrieve_q_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3b2800f-2955-4c5a-b73e-03f7ee66e7da",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities/?type=ParkingSpot&q=name==\"sspot_001\"",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "q",
									"value": "name==\"sspot_001\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a838665f-dba5-449e-a19f-f61eaf2a8073",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=ParkingSpot",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42ada2e1-ef62-431f-984d-01a9e2cd4f94",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=ParkingSpot&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-08-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-08-15T04:22:58Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49e23b20-ebdc-4fc3-811a-a144f2a0f1c2",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/urn:datahub:ParkingSpot:test_01",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								"urn:datahub:ParkingSpot:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d832c74-7016-4248-8062-cbeccba7468d",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/temporal/entities?type=ParkingSpot&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a654a64-2402-4411-8078-ff52c5495a87",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/temporal/entities?type=ParkingSpot&options=temporalValues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_retrieve_keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fbbc38b-25fe-473c-aac8-ec84a05691c7",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=ParkingSpot&options=keyValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_temporal_retrieve_keyValuesHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "809292ce-cdd0-484b-b2a0-c28a5cc4b96f",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=ParkingSpot&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "ParkingSpot"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_partial_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4998a0f6-ad06-411e-9bf9-a1af36fc1082",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"name\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"sspot_001\"\r\n   },\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      }\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"category\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         \"forDisabled\"\r\n      ]\r\n   },\r\n   \"width\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 2.5\r\n   },\r\n   \"length\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 5.1\r\n   },\r\n   \"status\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"free\"\r\n   },\r\n   \"refParkingLot\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"urn:ngsi-ld:OffStreetParking:5038\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:ParkingSpot:test_01/attrs/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01",
								"attrs",
								""
							]
						},
						"description": "ParkingSpot full update"
					},
					"response": []
				},
				{
					"name": "parkingspot_partial_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "635c269e-11f3-4582-b19f-eb9d54e4469e",
								"exec": [
									"",
									"var entityType = \"ParkingSpot\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"width\": {\r\n      \"type\": \"Property\",\r\n      \"value\": 12.5\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:ParkingSpot:test_01/attrs/width",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01",
								"attrs",
								"width"
							]
						}
					},
					"response": []
				},
				{
					"name": "parkingspot_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac3ffa8-a6f8-4310-849c-8f1fb57f6235",
								"exec": [
									"var entityType = \"ParkingSpot\";",
									"",
									"////////////////////////////",
									"////////////////////////////",
									"",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:ParkingSpot:test_01/attrs/width",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:ParkingSpot:test_01",
								"attrs",
								"width"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AirqualityObserved",
			"item": [
				{
					"name": "airqualityobserved_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81e17389-e07e-4721-9508-7369da088c57",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://datahub.kr/airquality.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:AirQualityObserved:test_01\",",
									"   \"type\": \"AirQualityObserved\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"airQualityObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"so2\": 0.005,",
									"         \"co\": 0.8,",
									"         \"o3\": 0.028,",
									"         \"no2\": 0.077,",
									"         \"pm10\": 13,",
									"         \"pm25\": 8",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"airQualityIndexObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"totalIndex\": 20,",
									"         \"totalCategory\": \"좋음\",",
									"         \"so2Category\": \"좋음\",",
									"         \"coCategory\": \"좋음\",",
									"         \"o3Category\": \"좋음\",",
									"         \"no2Category\": \"좋음\",",
									"         \"pm10Category\": \"좋음\",",
									"         \"pm25Category\": \"좋음\"",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"indexRef\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"",
									"   }",
									"}",
									"`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24260623-98bf-4152-804b-9d1bbc8837ec",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "195619b3-534c-4cd9-879d-b16ab81e4664",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edb04a46-f0fc-4ead-b0ba-5ab33af35472",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        ",
									"    }",
									"    ",
									"    pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/airquality.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:AirQualityObserved:test_01\",\r\n   \"type\": \"AirQualityObserved\",\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 0.005,\r\n         \"co\": 0.8,\r\n         \"o3\": 0.028,\r\n         \"no2\": 0.077,\r\n         \"pm10\": 13,\r\n         \"pm25\": 8\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"airQualityIndexObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"totalIndex\": 20,\r\n         \"totalCategory\": \"좋음\",\r\n         \"so2Category\": \"좋음\",\r\n         \"coCategory\": \"좋음\",\r\n         \"o3Category\": \"좋음\",\r\n         \"no2Category\": \"좋음\",\r\n         \"pm10Category\": \"좋음\",\r\n         \"pm25Category\": \"좋음\"\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"indexRef\": {\r\n      \"type\": \"Property\",\r\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "027739d3-47a6-4284-90fa-5d783a9f4de1",
								"exec": [
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d6361a9a-37d4-4efa-bdee-9a07d15c6949",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=AirQualityObserved",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa8e279-d2cd-47a8-8e24-9ef0e69134e7",
								"exec": [
									"",
									"var entityType = \"AirQualityObserved\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": " application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a407f744-9c35-46da-8a10-51e16e6c8597",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityObserved&attr=address,airQualityIndexObservation",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "attr",
									"value": "address,airQualityIndexObservation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve_geo_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c28a7b5-a480-4c2b-998c-11ce7c138405",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityObserved&limit=3&geometry=Polygon&geoproperty=location&maxDistance=3000&georel=disjoint&coordinates=[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]&attr=location",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3000"
								},
								{
									"key": "georel",
									"value": "disjoint"
								},
								{
									"key": "coordinates",
									"value": "[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]"
								},
								{
									"key": "attr",
									"value": "location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve_q_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c76f7ad9-77a9-4c79-8c75-8767f2e412da",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityObserved&limit=3&q=address[addressCountry]=='KR';airQualityObservation[so2]<0.5",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "q",
									"value": "address[addressCountry]=='KR';airQualityObservation[so2]<0.5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da21e95c-55e9-4de3-a7bd-9ca21e4e55f6",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityObserved",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b420631-ea7f-49f8-aca2-fb08d82bade4",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityObserved&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-08-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-08-15T04:22:58Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fca83fc4-160f-4870-b401-8af88a802a19",
								"exec": [
									"",
									"var entityType = \"AirQualityObserved\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/urn:datahub:AirQualityObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								"urn:datahub:AirQualityObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0fd8294-a325-4f8a-bb1c-952268c41d5f",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityObserved&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "603b628c-66af-4a10-ae8d-cac03619d754",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityObserved&options=temporalValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_retrieve_keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff50d3b1-2ce0-4068-bd54-449c7897b131",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"console.log(testBody)",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/entities?type=AirQualityObserved&options=keyValues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_temporal_retrieve_keyValuesHisotry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b0b4a12-4ea0-4047-b8ab-a362e8325dd1",
								"exec": [
									"var entityType = \"AirQualityObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"console.log(testBody)",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": " application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=AirQualityObserved&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityObserved"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99f70e7-8db3-44f0-890c-cbd58d2365d2",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"location\": {\n\"type\": \"GeoProperty\",\n\"value\": {\n\"type\": \"Point\",\n\"coordinates\": [\n127.1293735,\n37.4114423\n]\n},\n\"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n},\n\"address\": {\n\"type\": \"Property\",\n\"value\": {\n\"addressCountry\": \"KR\",\n\"addressRegion\": \"Gyeonggi-do\",\n\"addressLocality\": \"Seongnam-si\",\n\"streetAddress\": \"8th Seungin-ro\",\n\"addressTown\": \"Yatap-dong\"\n}\n},\n\"airQualityObservation\": {\n\"type\": \"Property\",\n\"value\": {\n\"so2\": 1.005,\n\"co\": 0.8,\n\"o3\": 0.028,\n\"no2\": 0.077,\n\"pm10\": 13,\n\"pm25\": 8\n},\n\"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n},\n\"airQualityIndexObservation\": {\n\"type\": \"Property\",\n\"value\": {\n\"totalIndex\": 20,\n\"totalCategory\": \"좋음\",\n\"so2Category\": \"좋음\",\n\"coCategory\": \"좋음\",\n\"o3Category\": \"좋음\",\n\"no2Category\": \"좋음\",\n\"pm10Category\": \"좋음\",\n\"pm25Category\": \"좋음\"\n},\n\"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\n},\n\"indexRef\": {\n\"type\": \"Property\",\n\"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n}\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:test_01/attrs",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:test_01",
								"attrs"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_partial_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdc5068f-1844-498e-8c7d-eb232e9dc053",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"airQualityObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"so2\": 2.105,\r\n         \"co\": 1.8,\r\n         \"o3\": 1.028,\r\n         \"no2\": 1.077,\r\n         \"pm10\": 11,\r\n         \"pm25\": 22\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:test_01/attrs/airQualityObservation",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:test_01",
								"attrs",
								"airQualityObservation"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityobserved_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20bc23da-7a89-4de6-80fc-c7fc41902b9c",
								"exec": [
									"//초기 세팅",
									"var entityType = \"OffStreetParking\";",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"////////////////",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityObserved:iot_01/attrs/airQualityObservation",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityObserved:iot_01",
								"attrs",
								"airQualityObservation"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AirQualityForecast",
			"item": [
				{
					"name": "airqualityforecast_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81221e73-3418-4a64-baa8-1695a0b92fbf",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{      \"id\": \"urn:datahub:AirQualityForecast:test_01\",",
									"",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/airquality.jsonld\"",
									"   ],",
									"   \"type\": \"AirQualityForecast\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"airQualityPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"so2\": 0.007,",
									"            \"co\": 0.9,",
									"            \"o3\": 0.03,",
									"            \"no2\": 0.08,",
									"            \"pm10\": 33,",
									"            \"pm25\": 22,",
									"            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"",
									"         },",
									"         {",
									"            \"so2\": 0.009,",
									"            \"co\": 0.7,",
									"            \"o3\": 0.02,",
									"            \"no2\": 0.05,",
									"            \"pm10\": 23,",
									"            \"pm25\": 12,",
									"            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"",
									"   },",
									"   \"airQualityIndexPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"totalIndex\": 20,",
									"            \"totalCategory\": \"좋음\",",
									"            \"so2Category\": \"좋음\",",
									"            \"coCategory\": \"좋음\",",
									"            \"o3Category\": \"좋음\",",
									"            \"no2Category\": \"좋음\",",
									"            \"pm10Category\": \"좋음\",",
									"            \"pm25Category\": \"좋음\",",
									"            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"",
									"         },",
									"         {",
									"            \"totalIndex\": 20,",
									"            \"totalCategory\": \"좋음\",",
									"            \"so2Category\": \"좋음\",",
									"            \"coCategory\": \"좋음\",",
									"            \"o3Category\": \"좋음\",",
									"            \"no2Category\": \"좋음\",",
									"            \"pm10Category\": \"좋음\",",
									"            \"pm25Category\": \"좋음\",",
									"            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"",
									"   },",
									"   \"indexRef\": {",
									"      \"type\": \"Property\",",
									"      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2178e7f0-989e-461a-abdc-050b16a54ac7",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityForecast:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e402fecf-57ac-464b-88e9-fdf61339d516",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31805b67-cba4-4811-89e6-dcdab821dd40",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        ",
									"    }",
									"    ",
									"    pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{      \"id\": \"urn:datahub:AirQualityForecast:test_01\",\n\n   \"@context\": [\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\n      \"http://datahub.kr/airquality.jsonld\"\n   ],\n   \"type\": \"AirQualityForecast\",\n   \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n         \"type\": \"Point\",\n         \"coordinates\": [\n            127.1293735,\n            37.4114423\n         ]\n      }\n   },\n   \"address\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"addressCountry\": \"KR\",\n         \"addressRegion\": \"Gyeonggi-do\",\n         \"addressLocality\": \"Seongnam-si\",\n         \"streetAddress\": \"8th Seungin-ro\",\n         \"addressTown\": \"Yatap-dong\"\n      }\n   },\n   \"airQualityPrediction\": {\n      \"type\": \"Property\",\n      \"value\": [\n         {\n            \"so2\": 0.007,\n            \"co\": 0.9,\n            \"o3\": 0.03,\n            \"no2\": 0.08,\n            \"pm10\": 33,\n            \"pm25\": 22,\n            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n         },\n         {\n            \"so2\": 0.009,\n            \"co\": 0.7,\n            \"o3\": 0.02,\n            \"no2\": 0.05,\n            \"pm10\": 23,\n            \"pm25\": 12,\n            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n         }\n      ],\n      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n   },\n   \"airQualityIndexPrediction\": {\n      \"type\": \"Property\",\n      \"value\": [\n         {\n            \"totalIndex\": 20,\n            \"totalCategory\": \"좋음\",\n            \"so2Category\": \"좋음\",\n            \"coCategory\": \"좋음\",\n            \"o3Category\": \"좋음\",\n            \"no2Category\": \"좋음\",\n            \"pm10Category\": \"좋음\",\n            \"pm25Category\": \"좋음\",\n            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n         },\n         {\n            \"totalIndex\": 20,\n            \"totalCategory\": \"좋음\",\n            \"so2Category\": \"좋음\",\n            \"coCategory\": \"좋음\",\n            \"o3Category\": \"좋음\",\n            \"no2Category\": \"좋음\",\n            \"pm10Category\": \"좋음\",\n            \"pm25Category\": \"좋음\",\n            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n         }\n      ],\n      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n   },\n   \"indexRef\": {\n      \"type\": \"Property\",\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n   }\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23ed7e58-ddbd-4392-9684-936039c009be",
								"exec": [
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "10e508d0-64e3-4626-a298-26510dc2873e",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=AirQualityForecast",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5c2e7ea-687e-48c5-b48a-13cbeeaa25e8",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityForecast:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62aac644-9999-4f3e-af06-f34c7ac821fe",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityForecast&attr=airQualityPrediction",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "attr",
									"value": "airQualityPrediction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve_q_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2173fdf1-81c5-410f-ae9e-211a6f7d3044",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityForecast&q=airQualityIndexPrediction[no2Category]=='좋음'",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "attr",
									"value": null,
									"disabled": true
								},
								{
									"key": "q",
									"value": "airQualityIndexPrediction[no2Category]=='좋음'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve_qeo_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb794eb7-fd12-42d6-8c98-08450cd4ef8e",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=AirQualityForecast&geometry=Polygon&geoproperty=location&maxDistance=3000&georel=intersects&coordinates=[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]&attr=location",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "attr",
									"value": null,
									"disabled": true
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3000"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "coordinates",
									"value": "[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]"
								},
								{
									"key": "attr",
									"value": "location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a58e630e-f657-4cb9-9ed4-07ef1029dbb2",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityForecast",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da1dd737-ef2b-42f7-bed4-bea67727779e",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/urn:datahub:AirQualityForecast:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								"urn:datahub:AirQualityForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68b2fff9-d634-42f0-af20-863ca339762d",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityForecast&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-08-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-08-15T04:22:58Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a2a5f77-43f5-40bb-932d-947c021a5764",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityForecast&options=temporalValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb0d93d9-36f5-40ee-a4ac-9dfaa251d6d0",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityForecast&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_retrieve_keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ad1c1ca-d0b4-4ca3-8992-46ada0816cd4",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=AirQualityForecast&options=keyValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_temporal_retrieve_keyValuesHisotry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9087fb18-8e90-401d-b35f-627d5585b428",
								"exec": [
									"var entityType = \"AirQualityForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/?type=AirQualityForecast&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "AirQualityForecast"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016912e-8d5a-4265-a57e-a47f56fac20e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"location\": {\n      \"type\": \"GeoProperty\",\n      \"value\": {\n         \"type\": \"Point\",\n         \"coordinates\": [\n            127.1293735,\n            37.4114423\n         ]\n      }\n   },\n   \"address\": {\n      \"type\": \"Property\",\n      \"value\": {\n         \"addressCountry\": \"KR\",\n         \"addressRegion\": \"Gyeonggi-do\",\n         \"addressLocality\": \"Seongnam-si\",\n         \"streetAddress\": \"8th Seungin-ro\",\n         \"addressTown\": \"Yatap-dong\"\n      }\n   },\n   \"airQualityPrediction\": {\n      \"type\": \"Property\",\n      \"value\": [\n         {\n            \"so2\": 0.007,\n            \"co\": 0.9,\n            \"o3\": 0.03,\n            \"no2\": 0.08,\n            \"pm10\": 33,\n            \"pm25\": 22,\n            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n         },\n         {\n            \"so2\": 0.009,\n            \"co\": 0.7,\n            \"o3\": 0.02,\n            \"no2\": 0.05,\n            \"pm10\": 23,\n            \"pm25\": 12,\n            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n         }\n      ],\n      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n   },\n   \"airQualityIndexPrediction\": {\n      \"type\": \"Property\",\n      \"value\": [\n         {\n            \"totalIndex\": 30,\n            \"totalCategory\": \"좋음\",\n            \"so2Category\": \"좋음\",\n            \"coCategory\": \"좋음\",\n            \"o3Category\": \"좋음\",\n            \"no2Category\": \"좋음\",\n            \"pm10Category\": \"좋음\",\n            \"pm25Category\": \"좋음\",\n            \"predictedAt\": \"2019-06-14T05:00:00,000+09:00\"\n         },\n         {\n            \"totalIndex\": 20,\n            \"totalCategory\": \"좋음\",\n            \"so2Category\": \"좋음\",\n            \"coCategory\": \"좋음\",\n            \"o3Category\": \"좋음\",\n            \"no2Category\": \"좋음\",\n            \"pm10Category\": \"좋음\",\n            \"pm25Category\": \"좋음\",\n            \"predictedAt\": \"2019-06-14T06:00:00,000+09:00\"\n         }\n      ],\n      \"observedAt\": \"2018-11-15T20:09:55,000+09:00\"\n   },\n   \"indexRef\": {\n      \"type\": \"Property\",\n      \"value\": \"https://www.airkorea.or.kr/web/khaiInfo?pMENU_NO=129\"\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:AirQualityForecast:test_01/attrs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01",
								"attrs"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_parial_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b8cb44c-b123-46b5-b454-3007c8040e2d",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"AirQualityForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n   \"airQualityIndexPrediction\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         {\r\n            \"totalIndex\": 20,\r\n            \"totalCategory\": \"좋음\",\r\n            \"so2Category\": \"좋음\",\r\n            \"coCategory\": \"좋음\",\r\n            \"o3Category\": \"좋음\",\r\n            \"no2Category\": \"좋음\",\r\n            \"pm10Category\": \"좋음\",\r\n            \"pm25Category\": \"좋음\",\r\n            \"predictedAt\": \"2019-06-14T14:00:00,000+09:00\"\r\n         },\r\n         {\r\n            \"totalIndex\": 20,\r\n            \"totalCategory\": \"좋음\",\r\n            \"so2Category\": \"좋음\",\r\n            \"coCategory\": \"좋음\",\r\n            \"o3Category\": \"좋음\",\r\n            \"no2Category\": \"나쁨\",\r\n            \"pm10Category\": \"좋음\",\r\n            \"pm25Category\": \"좋음\",\r\n            \"predictedAt\": \"2019-06-14T14:00:00,000+09:00\"\r\n         }\r\n      ],\r\n      \"observedAt\": \"2019-06-14T14:00:00,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:AirQualityForecast:test_01/attrs/airQualityIndexPrediction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01",
								"attrs",
								"airQualityIndexPrediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "airqualityforecast_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08aef439-4807-4df5-b941-b625195e9676",
								"exec": [
									"//초기 세팅",
									"var entityType = \"AirQualityForecast\";",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"////////////////",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:AirQualityForecast:test_01/attrs/indexRef",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:AirQualityForecast:test_01",
								"attrs",
								"indexRef"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WeatherObserved",
			"item": [
				{
					"name": "weatherobserved_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ae53247-7a97-4dfc-9aa4-b76c3c52e060",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/nㅇgsi-ld/core-context.jsonld\",",
									"      \"http://datahub.kr/weather.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:WeatherObserved:test_01\",",
									"   \"type\": \"WeatherObserved\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"weatherObservation\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"temperature\": 10.2,",
									"         \"windSpeed\": 0.3,",
									"         \"humidity\": 68,",
									"         \"rainfall\": 0.2,",
									"         \"hourlyRainfall\": 2.5,",
									"         \"rainType\": \"비\",",
									"         \"snowfall\": 0.2,",
									"         \"visibility\": 3000",
									"      },",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc7fb73d-e796-438b-98bb-2db0d112525e",
								"exec": [
									"//1. HTTP 상태코드 체크 ",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0428cccf-cdc2-4668-959f-401ae19ad269",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b3037ec-8196-4dcf-9928-22654757e55c",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        ",
									"    }",
									"    ",
									"    pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/weather.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:WeatherObserved:test_01\",\r\n   \"type\": \"WeatherObserved\",\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"weatherObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"temperature\": 10.2,\r\n         \"windSpeed\": 0.3,\r\n         \"humidity\": 68,\r\n         \"rainfall\": 0.2,\r\n         \"hourlyRainfall\": 2,\r\n         \"rainType\": \"비\",\r\n         \"snowfall\": 0.2,\r\n         \"visibility\": 3000\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17409a67-1b5c-4634-8457-b769438bd917",
								"exec": [
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc64dcc4-739c-4c58-9736-285755c928c4",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=WeatherObserved",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9e575ba-9695-4b0d-99e2-5dcd9a2c4f0e",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/urn:datahub:WeatherObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								"urn:datahub:WeatherObserved:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cd86993-77c6-4b4e-8213-3acc5a1b83bc",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=WeatherObserved&attr=location,address,weatherObservation\n\n\n\n\n\n\n",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "attr",
									"value": "location,address,weatherObservation\n\n\n\n\n\n\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve_geo_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "564bf31b-efbf-4750-9c90-a33ec724311f",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=WeatherObserved&geometry=Polygon&geoproperty=location&maxDistance=3000&georel=intersects&coordinates=[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]&attr=location",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3000"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "coordinates",
									"value": "[[[127.1276,37.4124],[127.1295,37.4121],[127.1296,37.4112],[127.1279,37.4113],[127.1276,37.4124]]]"
								},
								{
									"key": "attr",
									"value": "location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve_q-query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08c0dea4-b8d4-4769-8243-c6d350ed926c",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities?type=WeatherObserved&q=weatherObservation[temperature]==10.2",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "q",
									"value": "weatherObservation[temperature]==10.2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16928d34-6641-4d04-92dd-d0f1ae77993d",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=WeatherObserved",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								}
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f88fc89-1c57-49c9-90cd-0f2ea5cc3075",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities/urn:datahub:WeatherObserved:test_01",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities",
								"urn:datahub:WeatherObserved:test_01"
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c34c714-618b-41de-b568-b773a1cd1129",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=WeatherObserved&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-12-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-12-15T04:22:58Z"
								}
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9973e11c-6794-4d4d-96d7-132fe31a8338",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=WeatherObserved&options=temporalValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d970389c-0632-44d1-b0bf-fe4a25fae381",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=WeatherObserved&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_retrieve_ keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15e65772-05da-463a-a3ab-6eaecd6c3135",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/entities/?type=WeatherObserved&options=keyValues",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_temporal_retrieve_keyValuesHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee1ac289-a633-4608-855f-b9d1813452d5",
								"exec": [
									"var entityType = \"WeatherObserved\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{hostname}}/temporal/entities?type=WeatherObserved&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherObserved"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						},
						"description": "AirQualityObserved retrieve, option=temporalValues"
					},
					"response": []
				},
				{
					"name": "weatherobserved_parital_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40c0f58e-014a-4854-9bd0-be514e9d5f5e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"weatherObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"temperature\": 10.2,\r\n         \"windSpeed\": 0.3,\r\n         \"humidity\": 68,\r\n         \"rainfall\": 0.2,\r\n         \"hourlyRainfall\": 3,\r\n         \"rainType\": \"비\",\r\n         \"snowfall\": 0.2,\r\n         \"visibility\": 3000\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherObserved:test_01/attrs/",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherObserved:test_01",
								"attrs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_partial_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e77b0adf-ea29-4e50-899b-38940467f59e",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherObserved\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weatherObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"temperature\": 11.2,\r\n         \"windSpeed\": 0.3,\r\n         \"humidity\": 68,\r\n         \"rainfall\": 0.2,\r\n         \"hourlyRainfall\": 2,\r\n         \"rainType\": \"비\",\r\n         \"snowfall\": 0.2,\r\n         \"visibility\": 3000\r\n      },\r\n      \"observedAt\": \"2018-11-16T05:09:55,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherObserved:test_01/attrs/weatherObservation",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherObserved:test_01",
								"attrs",
								"weatherObservation"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherobserved_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9f05ce0-e0ec-42eb-a249-1c6bb2320378",
								"exec": [
									"//초기 세팅",
									"var entityType = \"WeatherObserved\";",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"////////////////",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weatherObservation\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"temperature\": 11.2,\r\n         \"windSpeed\": 0.3,\r\n         \"humidity\": 68,\r\n         \"rainfall\": 0.2,\r\n         \"hourlyRainfall\": 2.5,\r\n         \"rainType\": \"비\",\r\n         \"snowfall\": 0.2,\r\n         \"visibility\": 3000\r\n      },\r\n      \"observedAt\": \"2018-11-15T20:09:55,000Z\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://{{hostname}}/entities/urn:datahub:WeatherObserved:test_01/attrs/weatherObservation",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"entities",
								"urn:datahub:WeatherObserved:test_01",
								"attrs",
								"weatherObservation"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WeatherForecast",
			"item": [
				{
					"name": "weatherforecast_delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4093332-4318-491c-b754-41234ec2c1cb",
								"exec": [
									"//1. 샘플 body 입력 ",
									"var test_body = ",
									"`",
									"{",
									"   \"@context\": [",
									"      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",",
									"      \"http://cityhub.kr/ngsi-ld/weather.jsonld\"",
									"   ],",
									"   \"id\": \"urn:datahub:WeatherForecast:test_01\",",
									"   \"type\": \"WeatherForecast\",",
									"   \"location\": {",
									"      \"type\": \"GeoProperty\",",
									"      \"value\": {",
									"         \"type\": \"Point\",",
									"         \"coordinates\": [",
									"            127.1293735,",
									"            37.4114423",
									"         ]",
									"      }",
									"   },",
									"   \"address\": {",
									"      \"type\": \"Property\",",
									"      \"value\": {",
									"         \"addressCountry\": \"KR\",",
									"         \"addressRegion\": \"Gyeonggi-do\",",
									"         \"addressLocality\": \"Seongnam-si\",",
									"         \"streetAddress\": \"8th Seungin-ro\",",
									"         \"addressTown\": \"Yatap-dong\"",
									"      }",
									"   },",
									"   \"weatherPrediction\": {",
									"      \"type\": \"Property\",",
									"      \"value\": [",
									"         {",
									"            \"temperature\": 10.1,",
									"            \"lowestTemperature\": -3.0,",
									"            \"highestTemperature\": 7.0,",
									"            \"windSpeed\": 0.2,",
									"            \"humidity\": 68,",
									"            \"rainfall\": 10,",
									"            \"rainfallProbability\": 60,",
									"            \"rainType\": \"비\",",
									"            \"snowfall\": 0,",
									"            \"predictedAt\": \"2019-06-08T06:00:00,000Z\"",
									"         },",
									"         {",
									"            \"temperature\": 14.1,",
									"            \"lowestTemperature\": -3.0,",
									"            \"highestTemperature\": 7.0,",
									"            \"windSpeed\": 0.3,",
									"            \"humidity\": 65,",
									"            \"rainfall\": 20,",
									"            \"rainfallProbability\": 60,",
									"            \"rainType\": \"맑음\",",
									"            \"snowfall\": 0,",
									"            \"predictedAt\": \"2019-06-08T09:00:00,000Z\"",
									"         }",
									"      ],",
									"      \"observedAt\": \"2018-11-15T20:09:55,000Z\"",
									"   }",
									"}`;",
									"",
									"",
									"",
									"//2, 삭제를 위해 샘플 데이터 생성 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities\",",
									"    method: \"POST\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"     mode: 'raw',",
									"     raw: JSON.parse(test_body)",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									" }",
									");",
									"",
									"/*",
									"*",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:WeatherForecast:test_01",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:WeatherForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_create_entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64046083-fccb-4e2f-b359-92e8f13fb250",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"//1. 등록된 정보가 있을 경우, 삭제 ",
									"var hostname = pm.variables.get(\"hostname\")",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + hostname + \"/entities/urn:datahub:\" + entityType + \":test_01\", ",
									"    method: \"DELETE\",",
									"    header: [\"Content-Type:application/json\"],",
									"    body: {",
									"    }",
									" },",
									" function (err, res) {",
									"     console.log(\"pre_condition : \" + res.status)",
									"     ",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25e6cd9f-9531-446a-b324-ccd337587971",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////",
									"///////////////////////////",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"",
									"",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    header: \"accept:application/ld+json\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    ",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (key == 'type'){",
									"            continue;",
									"        }",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"        ",
									"    }",
									"    ",
									"    pm.environment.set(entityType+\"TestBody\",JSON.parse(pm.request.body.raw));",
									"",
									"",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"@context\": [\r\n      \"http://uri.etsi.org/ngsi-ld/core-context.jsonld\",\r\n      \"http://datahub.kr/weather.jsonld\"\r\n   ],\r\n   \"id\": \"urn:datahub:WeatherForecast:test_01\",\r\n   \"type\": \"WeatherForecast\",\r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      }\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"weatherPrediction\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         {\r\n            \"temperature\": 10.1,\r\n            \"lowestTemperature\": -3.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.2,\r\n            \"humidity\": 68,\r\n            \"rainfall\": 10,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"비\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         },\r\n         {\r\n            \"temperature\": 14.1,\r\n            \"lowestTemperature\": -3.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.3,\r\n            \"humidity\": 65,\r\n            \"rainfall\": 20,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"맑음\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         }\r\n      ],\r\n      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fe9a13f-358c-4c18-aa6b-aa4b54602d18",
								"exec": [
									"/*",
									"초기 세팅",
									"* dictionary 비교를 위해 flat하는 함수",
									"*/",
									"//",
									"",
									"var flattenObject = function flattenObj(obj){",
									"    let flat = {}",
									"        for(let i in obj){",
									"           if(typeof obj[i] == 'object'){",
									"              let flatObj = flattenObj(obj[i])",
									"              for(let x in flatObj){",
									"                  flat[i + \".\" + x] = flatObj[x]",
									"              }",
									"          } else {",
									"           flat[i] = obj[i]",
									"          }",
									"       }",
									"    return flat",
									"}",
									"postman.setEnvironmentVariable(\"flattenObject\", flattenObject);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa9d5030-1f83-4037-9de2-ebceb310a9a6",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities/?type=WeatherForecast",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7abd2639-4db6-4221-8009-954499903ea6",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/urn:datahub:WeatherForecast:test_01",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								"urn:datahub:WeatherForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve_attr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f1fa69-b531-4d04-b99f-ff9c302de747",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities?type=WeatherForecast&attr=weatherPrediction,address",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "attr",
									"value": "weatherPrediction,address"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve_geo-query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bebb4ea3-0f47-4c5d-af07-afeb7f6e4eba",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities?type=WeatherForecast&geometry=Polygon&geoproperty=location&maxDistance=3500&georel=near&coordinates=[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]&attr=location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities"
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "maxDistance",
									"value": "3500"
								},
								{
									"key": "georel",
									"value": "near"
								},
								{
									"key": "coordinates",
									"value": "[[[127.108712213155,37.4039308909918], [127.10871370495,37.4038047517174], [127.109571955085,37.403820218985], [127.109569815879,37.4030452782807], [127.112506377227,37.4030583117045], [127.11267716721,37.4029424517435], [127.112700664842,37.3999870997203], [127.112644515041,37.3999596467278], [127.10677152971,37.3999425268874], [127.106612244893,37.4000404436483], [127.105312496268,37.4029681361633], [127.105390591903,37.4030498229114], [127.10655398512,37.4030495953737], [127.10653318449,37.403851395132], [127.106645485308,37.403906306877], [127.108712213155,37.4039308909918]]]"
								},
								{
									"key": "attr",
									"value": "location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve_q_query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9ee2b0c-f8d5-4018-8780-0a14ddfed2a0",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities/?type=WeatherForecast&q=address[addressCountry]==\"KR\"|weatherPrediction[rainType]==\"맑음\"",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "q",
									"value": "address[addressCountry]==\"KR\"|weatherPrediction[rainType]==\"맑음\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbafdc5d-49c0-4627-87a6-ddd4b5677ae9",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=WeatherForecast",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f62cded-b700-4d3d-b72d-17b03417c61c",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var flattenTestBody= flattenFunc(testBody);",
									"",
									"var responseBody = pm.response.json()",
									"var flattenResBody =flattenFunc(responseBody);",
									"",
									"for (var key in flattenTestBody) {",
									"        if (flattenResBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flattenTestBody[key];",
									"                var responseValue = flattenResBody[key];",
									"                console.log(requestValue, responseValue)",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/urn:datahub:WeatherForecast:test_01",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								"urn:datahub:WeatherForecast:test_01"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve_timerel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a66e803-ea70-437f-be49-c1e3f7670e97",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=WeatherForecast&timerel=between&time=2018-11-16T05:09:55+09:00&endtime=2019-08-15T04:22:58Z",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "time",
									"value": "2018-11-16T05:09:55+09:00"
								},
								{
									"key": "endtime",
									"value": "2019-08-15T04:22:58Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve_temporalValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c88c664c-537c-441e-acb3-785a131cf7a7",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=WeatherForecast&options=temporalValues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "options",
									"value": "temporalValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve_normalizedHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7e8c479-a5a4-474e-bde0-efc64350f0ca",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=WeatherForecast&options=normalizedHistory",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "options",
									"value": "normalizedHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_retrieve_keyValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "143589fc-db63-482d-8c60-f85295b76a38",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/entities/?type=WeatherForecast&options=keyValues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_temporal_retrieve_keyValuesHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3d75b24-c44f-48db-b44a-ffde325db134",
								"exec": [
									"var entityType = \"WeatherForecast\";",
									"",
									"///////////////////////////////////////",
									"///////////////////////////////////////",
									"",
									"var testBody = pm.environment.get(entityType+\"TestBody\");",
									"var responseBody = pm.response.json()",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"///////////////////////////////////////",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var selectedItem;",
									"",
									"for (i = 0; i < responseBody.length; i++) {",
									"",
									"    if (responseBody[i].id == testBody.id)",
									"    {",
									"          ",
									"          selectedItem = responseBody[i]; ",
									"          break;",
									"",
									"    }",
									"}",
									"",
									"",
									"var flatSelectedItem =  flattenFunc(selectedItem)",
									"var flatTestBody =  flattenFunc(testBody)",
									"",
									"for (var key in flatTestBody) {",
									"        if (flatSelectedItem.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = flatTestBody[key];",
									"                var responseValue = flatSelectedItem[key];",
									"                //except simplified version location.type ",
									"                if (key != \"location.type\"){",
									"                    pm.expect(requestValue).equal(responseValue);",
									"                }",
									"",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/ld+json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/temporal/entities/?type=WeatherForecast&options=keyValuesHistory",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"temporal",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "WeatherForecast"
								},
								{
									"key": "options",
									"value": "keyValuesHistory"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_partial_update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f921aa1a-3339-4ba1-ae63-552ede126c00",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3db5f69e-03bd-440b-b298-1df328d9a8a0",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"location\": {\r\n      \"type\": \"GeoProperty\",\r\n      \"value\": {\r\n         \"type\": \"Point\",\r\n         \"coordinates\": [\r\n            127.1293735,\r\n            37.4114423\r\n         ]\r\n      }\r\n   },\r\n   \"address\": {\r\n      \"type\": \"Property\",\r\n      \"value\": {\r\n         \"addressCountry\": \"KR\",\r\n         \"addressRegion\": \"Gyeonggi-do\",\r\n         \"addressLocality\": \"Seongnam-si\",\r\n         \"streetAddress\": \"8th Seungin-ro\",\r\n         \"addressTown\": \"Yatap-dong\"\r\n      }\r\n   },\r\n   \"weatherPrediction\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         {\r\n            \"temperature\": 10.1,\r\n            \"lowestTemperature\": -3.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.2,\r\n            \"humidity\": 68,\r\n            \"rainfall\": 10,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"비\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         },\r\n         {\r\n            \"temperature\": 14.1,\r\n            \"lowestTemperature\": -3.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.3,\r\n            \"humidity\": 65,\r\n            \"rainfall\": 20,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"비\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         }\r\n      ],\r\n      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:WeatherForecast:test_01/attrs/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:WeatherForecast:test_01",
								"attrs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_parital_update_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e26406f4-dc10-459d-a976-621d9574689d",
								"exec": [
									"//////////////////////////////",
									"var entityType = \"WeatherForecast\";",
									"var flattenFunc = eval(\"(\"+environment.flattenObject+\")\");",
									"//////////////////////////////",
									"",
									"//1. HTTP 상태코드",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//2. parital update값과 조회 결과 비교 ",
									"var requestBody = flattenFunc(JSON.parse(pm.request.body.raw));",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    var responseBody = flattenFunc(response.json());",
									"    console.log(responseBody)",
									"    ",
									"    ",
									"    for (var key in requestBody) {",
									"        ",
									"        if (requestBody.hasOwnProperty(key)) {  ",
									"             pm.test(key + \" is equal to\", function() {",
									"                var requestValue = requestBody[key];",
									"                var responseValue = responseBody[key];",
									"                pm.expect(requestValue).equal(responseValue);",
									"",
									"             });",
									"             ",
									"        }",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weatherPrediction\": {\r\n      \"type\": \"Property\",\r\n      \"value\": [\r\n         {\r\n            \"temperature\": -10.1,\r\n            \"lowestTemperature\": -3.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.2,\r\n            \"humidity\": 68,\r\n            \"rainfall\": 10,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"비\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         },\r\n         {\r\n            \"temperature\": 14.1,\r\n            \"lowestTemperature\": -33.0,\r\n            \"highestTemperature\": 7.0,\r\n            \"windSpeed\": 0.3,\r\n            \"humidity\": 65,\r\n            \"rainfall\": 20,\r\n            \"rainfallProbability\": 60,\r\n            \"rainType\": \"비\",\r\n            \"snowfall\": 0,\r\n            \"predictedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n         }\r\n      ],\r\n      \"observedAt\": \"2019-06-08T15:00:00,000+09:00\"\r\n   }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:WeatherForecast:test_01/attrs/weatherPrediction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:WeatherForecast:test_01",
								"attrs",
								"weatherPrediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "weatherforecast_delete_attrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2b02513-0a84-4295-976b-f8cf42eaa6b8",
								"exec": [
									"//초기 세팅",
									"var entityType = \"WeatherForecast\";",
									"var path = pm.request.url.path",
									"var attrId = path[path.length-1]",
									"////////////////",
									"",
									"",
									"//1. HTTP CODE 확인",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//2. 삭제 여부 파악 ",
									"pm.sendRequest({",
									"    url: \"http://\" + pm.variables.get(\"hostname\") + \"/entities/urn:datahub:\"+ entityType + \":test_01\",",
									"    method: \"GET\",",
									"    body: {}",
									" },",
									" function (err, response) {",
									"     ",
									"    ",
									"    pm.test(\"attr id is null\", function () {",
									"        var responseBody = response.json();",
									"        pm.expect(responseBody[attrId]).to.eql(undefined);",
									"    });  ",
									"    ",
									" }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/entities/urn:datahub:WeatherForecast:test_01/attrs/weatherPrediction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"entities",
								"urn:datahub:WeatherForecast:test_01",
								"attrs",
								"weatherPrediction"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}